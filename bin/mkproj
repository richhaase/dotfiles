#!/usr/bin/env python

'''
	A simple program for creating new python program directory structures

    
'''

import sys
import os
import logging
from optparse import OptionParser, OptionGroup

version = '0.1'

parser = OptionParser(usage='%prog [options] project-name', version='%prog 0.1')
parser.add_option('-v', action='store_true', dest='verbose', 
                        help='verbose mode: lots of debugging stuff')
parser.add_option('-q', action='store_false', dest='verbose', default=False,
                        help='quiet mode: no extraneous information [Default]')
parser.add_option('-g', '--git', action='store_true', dest='git',
                        help='set new project up as a git repo')
parser.add_option('-s', '--with-sql', action='store_true', dest='sql', 
                        help='adds a directory for SQL to the project')

lang_group = OptionGroup(parser, "Programing languages")
lang_group.add_option('-p', '--python', action='store_const', dest='project_type', const='python', 
                            default='python', help='setup a python project [Default]')
parser.add_option_group(lang_group)

conf_group = OptionGroup(parser, "Configuration file format")
conf_group.add_option('-y', '--yaml', action='store_const', dest='config_ext', const='yaml', 
                            default='yaml', help='yaml config file [Default]')
conf_group.add_option('-j', '--json', action='store_const', dest='config_ext', const='json', 
                            help='json config file')
parser.add_option_group(conf_group)

(options, args) = parser.parse_args()


def mkfile(filename, content):
    with open(filename, 'w') as newfile:
        newfile.write(content)


def python(project, ext):
    """
        Creates a reasonably useful set of files and directories for a new python project
    """
    os.mkdir(project)
    os.mkdir('%s/%s' % (project, project))
    os.mkdir('%s/config' % project)
    os.mkdir('%s/scripts' % project)
    os.mkdir('%s/tests' % project)

    if options.sql is True: os.mkdir('%s/%s/sql' % (project, project))

    mkfile('%s/README.md' % project, '')
    mkfile('%s/setup.py' % project, '')
    mkfile('%s/%s/__init__.py' % (project, project), '')
    mkfile('%s/config/%s.%s' % (project, project, ext), '')



def git(project):  
    """
        Sets the project up as a git repo
    """
    os.system("""git init %s;
                 cd %s;
                 git add *;
                 git remote add origin git@github.com:richhaase/%s.git
              """ % (project, project, project))


if __name__ == '__main__':
    if options.verbose is True:
        print 'options:\n %s\n' % options
        print 'args:\n %s\n' % args

    ext = options.config_ext

    if len(args) > 1:
        print 'NOTICE: replacing whitespace in project-name with underscores'
        proj = '_'.join(args)
    elif len(args) < 1:
        print 'ERROR: project-name is required'
        parser.print_help()
        sys.exit(91)
    else:
        proj = args[0]

    if os.path.exists(proj):
        print 'ERROR: %s already exists!' % proj
        parser.print_help()

    if options.project_type == 'python':    python(proj, ext)
    if options.git is True:                 git(proj)

    sys.exit(0)

